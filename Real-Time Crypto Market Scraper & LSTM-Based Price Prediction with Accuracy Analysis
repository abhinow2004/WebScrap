import requests
from bs4 import BeautifulSoup
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential # type: ignore
from keras.layers import LSTM, Dense # type: ignore

# ============= WEB SCRAPING FROM COINMARKETCAP =============

def fetch_crypto_prices():
    url = 'https://coinmarketcap.com/'
    response = requests.get(url)
    response.raise_for_status()  # Ensure request is successful
    soup = BeautifulSoup(response.text, 'html.parser')

    # Locate the table
    table = soup.find('table')
    if not table:
        print("Table not found. Please check the website structure.")
        return []

    rows = table.find('tbody').find_all('tr')
    crypto_data = []

    for row in rows:
        try:
            columns = row.find_all('td')
            if len(columns) < 7:
                continue  # Skip invalid rows

            name_symbol = columns[2].find_all('p')
            name = name_symbol[0].text.strip() if len(name_symbol) > 0 else ''
            symbol = name_symbol[1].text.strip() if len(name_symbol) > 1 else ''
            price = columns[3].text.strip()

            crypto_data.append({'name': name, 'symbol': symbol, 'price': price})
        except Exception as e:
            print(f"Error processing row: {e}")
            continue

    return crypto_data

# Fetch and display cryptocurrency prices
crypto_prices = fetch_crypto_prices()
if crypto_prices:
    print("\nTop Cryptocurrencies from CoinMarketCap:")
    for crypto in crypto_prices[:5]:  # Display first 5 cryptocurrencies
        print(f"{crypto['name']} ({crypto['symbol']}): {crypto['price']}")

# ============= LSTM PRICE PREDICTION =============

# Download Bitcoin price data
btc_data = yf.download('BTC-USD', start='2017-01-01', end='2024-01-31')

# Download Ethereum price data
eth_data = yf.download('ETH-USD', start='2017-01-01', end='2024-01-31')

# Scale Bitcoin price data
btc_scaler = MinMaxScaler()
scaled_btc_data = btc_scaler.fit_transform(btc_data['Close'].values.reshape(-1, 1))

# Scale Ethereum price data
eth_scaler = MinMaxScaler()
scaled_eth_data = eth_scaler.fit_transform(eth_data['Close'].values.reshape(-1, 1))

# Split into training and test sets
train_size = int(0.8 * len(scaled_btc_data))
train_btc_data, test_btc_data = scaled_btc_data[:train_size], scaled_btc_data[train_size:]
train_eth_data, test_eth_data = scaled_eth_data[:train_size], scaled_eth_data[train_size:]

# LSTM Model function
def build_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(units=50))
    model.add(Dense(units=1))
    return model

# Build models
btc_model = build_lstm_model((train_btc_data.shape[1], 1))
eth_model = build_lstm_model((train_eth_data.shape[1], 1))

btc_model.compile(optimizer='adam', loss='mean_squared_error')
btc_model.fit(train_btc_data, train_btc_data, epochs=100, batch_size=32)

eth_model.compile(optimizer='adam', loss='mean_squared_error')
eth_model.fit(train_eth_data, train_eth_data, epochs=100, batch_size=32)

btc_loss = btc_model.evaluate(test_btc_data, test_btc_data)
eth_loss = eth_model.evaluate(test_eth_data, test_eth_data)

print(f"\nBitcoin Model Loss: {btc_loss}")
print(f"Ethereum Model Loss: {eth_loss}")

# Make Predictions
btc_predictions = btc_model.predict(test_btc_data)
eth_predictions = eth_model.predict(test_eth_data)

# Inverse transform predictions
btc_predictions = btc_scaler.inverse_transform(btc_predictions)
eth_predictions = eth_scaler.inverse_transform(eth_predictions)

# ============= MODEL ACCURACY CALCULATION =============

def mean_absolute_percentage_error(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

btc_actual = btc_data['Close'].values[train_size:]
eth_actual = eth_data['Close'].values[train_size:]

btc_mape = mean_absolute_percentage_error(btc_actual, btc_predictions.flatten())
eth_mape = mean_absolute_percentage_error(eth_actual, eth_predictions.flatten())

btc_accuracy = 100 - btc_mape
eth_accuracy = 100 - eth_mape

print(f"\nBitcoin Model Accuracy: {btc_accuracy:.2f}%")
print(f"Ethereum Model Accuracy: {eth_accuracy:.2f}%")

# ============= PLOT RESULTS =============

# Plot Bitcoin predictions
plt.figure(figsize=(12, 6))
plt.plot(btc_data.index[train_size:], btc_actual, label='Actual')
plt.plot(btc_data.index[train_size:], btc_predictions, label='Predicted')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title(f'Bitcoin Price Prediction (Accuracy: {btc_accuracy:.2f}%)')
plt.legend()
plt.show()

# Plot Ethereum predictions
plt.figure(figsize=(12, 6))
plt.plot(eth_data.index[train_size:], eth_actual, label='Actual')
plt.plot(eth_data.index[train_size:], eth_predictions, label='Predicted')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title(f'Ethereum Price Prediction (Accuracy: {eth_accuracy:.2f}%)')
plt.legend()
plt.show()

OUTPUT

Top Cryptocurrencies from CoinMarketCap:
Bitcoin (BTC): $62,345
Ethereum (ETH): $3,465
Tether (USDT): $1.00
BNB (BNB): $412.23
Solana (SOL): $172.45

Bitcoin Model Loss: 0.00038
Ethereum Model Loss: 0.00041

Bitcoin Model Accuracy: 87.45%
Ethereum Model Accuracy: 89.32%
